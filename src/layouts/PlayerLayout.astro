---
export const prerender = false
import Layout from "./Layout.astro"
import Header from "../components/layout/Header.astro"
import HeaderContent from "../components/layout/HeaderContent.astro"
import HeaderNav from "../components/layout/HeaderNav.astro"
import { RankedBadge } from "../components/ui/RankedBadge"
import HeaderMeta from "../components/layout/HeaderMeta.astro"
import { formatDateRelative, getPlayerSlug } from "../lib/format"
import type { PlayerResponse } from "../lib/api"
import { getCollection } from "astro:content"
import { Image } from "astro:assets"
import { Tooltip } from "../components/ui/Tooltip"
import DeprecationNotice from "../components/promos/DeprecationNotice.astro"
interface Props {
  player: PlayerResponse
}

const { player } = Astro.props
const username = player.nickname ?? Astro.params.username ?? ""
const slug = getPlayerSlug(player)

const leaderboardEntries = player?.leaderboard_entries
  .filter((x) => x.matches > 0)
  .sort((a, b) => (b.points ?? 0) - (a.points ?? 0))
const highestLeague = leaderboardEntries?.[0]
const url = Astro.url
const ogImageUrl = `${url.protocol}//${url.host}/og-image/players/${slug}.png?t=${player.last_match_ended_at}`
const ogTitle = `${player.nickname} - ${highestLeague.rank ? `Rank # ${highestLeague.rank} - ` : ""} Stormgate World`
const ogDescription = `View the match history, win rates, top opponents, and more stats for ${player.nickname}.`

const badges = (await getCollection("badges")).filter((badge) => badge.data.playerIds.includes(player.id))
const playerInfo = (await getCollection("players")).find((p) => p.data.playerId === player.id)
---

<Layout title={username} ogTitle={ogTitle} ogDescription={ogDescription} ogImageUrl={ogImageUrl}>
  <Header backdropImage={player.avatar_url}>
    <HeaderNav
      breadcrumb={[
        { href: "/leaderboards/ranked_1v1", label: "Leaderboard" },
        { href: `/players/${slug}`, label: username },
      ]}
      current={[
        { href: `/players/${slug}`, label: "Overview" },
        { href: `/players/${slug}/matches`, label: "Match History" },
        { href: `/players/${slug}/statistics`, label: "Statistics" },
      ]}
    />
    <HeaderContent>
      {
        player.avatar_url && (
          <img
            slot="left"
            src={player.avatar_url}
            alt={player.nickname}
            class="mr-4 size-8 flex-none rounded md:size-16"
          />
        )
      }
      <div>
        <div class="flex items-center gap-2">
          <h1 class="text-xl font-black text-white/90 md:text-3xl">{player.nickname!}</h1>
          {
            badges.map((badge) => (
              <Tooltip content={badge.data.name} client:idle>
                <Image
                  src={badge.data.icon}
                  alt={badge.data.name}
                  title={badge.data.name}
                  class="mr-2 h-8 w-8 rounded-full "
                />
              </Tooltip>
            ))
          }
        </div>
        {
          playerInfo && playerInfo.data.name != player.nickname && (
            <p class="mt-0.5 text-sm font-semibold text-white/50">Also known as {playerInfo.data.name}</p>
          )
        }
      </div>
      <RankedBadge slot="right" entry={highestLeague} class="w-16 md:w-20" client:load />
    </HeaderContent>
    <HeaderMeta
      items={[
        {
          icon: import("lucide-static/icons/activity.svg?raw"),
          label: `Last Match ${formatDateRelative(new Date(player.last_match_ended_at!))}`,
        },
        {
          icon: import("lucide-static/icons/hash.svg?raw"),
          label: player.id,
          tooltip: "Stormgate World Player ID",
          clickToCopy: true,
        },
        ...(playerInfo?.data.liquipediaUrl
          ? [
              {
                icon: import("lucide-static/icons/award.svg?raw"),
                label: `Verified Pro`,
                href: playerInfo.data.liquipediaUrl,
              },
            ]
          : []),
      ]}
    />
  </Header>
  <DeprecationNotice lostValue="meaning we can't show recent matches or update player statistics" />
  <slot />
</Layout>
