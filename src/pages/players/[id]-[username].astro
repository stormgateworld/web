---
export const prerender = false
import Layout from "../../layouts/Layout.astro"
import Header from "../../components/layout/Header.astro"
import HeaderContent from "../../components/layout/HeaderContent.astro"

import Widget from "../../components/Widget.astro"
import { Image } from "astro:assets"
import infernals from "../../assets/game/factions/infernals-small.png"
import vanguard from "../../assets/game/factions/vanguard-small.png"
import MatchPreview from "../../components/widgets/MatchPreview.astro"
import { PlayersApi } from "../../lib/api"
import { RankedBadge } from "../../components/ui/RankedBadge"
import PlayerActivity from "../../components/widgets/PlayerActivity.astro"
import PlayerMatchupStats from "../../components/widgets/PlayerMatchupStats.astro"
import PlayerGameLengthStats from "../../components/widgets/PlayerGameLengthStats.astro"
import PlayerOpponents from "../../components/widgets/PlayerOpponents.astro"
import { styles } from "../../lib/theme"
import HeaderMeta from "../../components/layout/HeaderMeta.astro"
import Section from "../../components/layout/Section.astro"
import Main from "../../components/layout/Main.astro"
import Sidebar from "../../components/layout/Sidebar.astro"
import { formatDateRelative } from "../../lib/format"
import PlayerFactionCard from "../../components/widgets/PlayerFactionCard.astro"
import Box from "../../components/layout/Box.astro"

type Theme = keyof typeof styles.badges

// to be moved to own file
async function getDataOrErrorResponse<T extends readonly unknown[] | []>(
  ...values: T
): Promise<[{ -readonly [P in keyof T]: Awaited<T[P]> }, error: Response | null]> {
  try {
    const result = await Promise.all(values)
    return [result, null]
  } catch (e) {
    return [[] as any, new Response(null, { status: 500, statusText: `${e}` })]
  }
}

const playerId = Astro.params.id!
const [[player, playerMatches, playerActivity, playerMatchupStats, playerOpponents], error] =
  await getDataOrErrorResponse(
    PlayersApi.getPlayer({ playerId }),
    PlayersApi.getPlayerMatches({ playerId }),
    PlayersApi.getPlayerStatisticsActivity({ playerId }),
    PlayersApi.getPlayerStatisticsMatchups({ playerId }),
    PlayersApi.getPlayerStatisticsOpponents({ playerId, count: 5 })
  )
if (error) return error

const leaderboardEntries = player?.leaderboard_entries
  .filter((x) => x.matches > 0)
  .sort((a, b) => (b.points ?? 0) - (a.points ?? 0))

const highestLeague = leaderboardEntries?.[0]
const ogImageUrl = `/og-image/players/${playerId}-${player.nickname}.png?t=${player.last_match_ended_at}`
const ogTitle = `${player.nickname} - ${highestLeague.rank ? `Rank # ${highestLeague.rank} - ` : ""} Stormgate World`
const ogDescription = `View the match history, win rates, top opponents, and more stats for ${player.nickname}.`
---

<Layout title={player?.nickname!} ogTitle={ogTitle} ogDescription={ogDescription} ogImageUrl={ogImageUrl}>
  <Header backdropImage={player.avatar_url}>
    <HeaderContent section="Players" title={player.nickname!}>
      {
        player.avatar_url && (
          <img
            slot="left"
            src={player.avatar_url}
            alt={player.nickname}
            class="mr-4 size-8 flex-none rounded md:size-16"
          />
        )
      }
      <RankedBadge slot="right" entry={highestLeague} class="w-16 md:w-20" client:load />
    </HeaderContent>
    <HeaderMeta
      items={[
        {
          icon: import("lucide-static/icons/activity.svg?raw"),
          label: `Last Match ${formatDateRelative(
            new Date(playerMatches.matches[0]?.created_at || player.last_match_ended_at!)
          )}`,
        },
        { icon: import("lucide-static/icons/hash.svg?raw"), label: player.id },
      ]}
    />
  </Header>
  <Section>
    <Main>
      <div class="flex flex-col gap-4 md:flex-row">
        {
          leaderboardEntries.map((entry) => (
            <PlayerFactionCard
              faction={entry.race === "infernals" ? "infernals" : "vanguard"}
              entry={entry}
              class="flex-grow basis-1/2"
            />
          ))
        }
        {
          leaderboardEntries.length === 1 && (
            <Box class="hidden basis-2/5 items-center justify-center opacity-70 md:flex">
              <p class="text-center font-bold text-gray-500">No other factions played</p>
            </Box>
          )
        }
      </div>
      <Widget title="Recent Matches" label="Closed Beta Ranked">
        <div class="">
          {playerMatches.matches.map((match) => <MatchPreview match={match} mainPlayerId={playerId} />)}
        </div>
      </Widget>
    </Main>
    <Sidebar>
      {playerActivity?.history && <PlayerActivity activity={playerActivity} {player} />}
      {playerMatchupStats.matchups.length > 0 && <PlayerMatchupStats playerMatchupStats={playerMatchupStats} />}
      {playerMatchupStats.matchups.length > 0 && <PlayerGameLengthStats playerMatchupStats={playerMatchupStats} />}
      {playerOpponents.opponents.length > 0 && <PlayerOpponents opponents={playerOpponents} />}
    </Sidebar>
  </Section>
</Layout>
