---
export const prerender = false
import Layout from "../../layouts/Layout.astro"
import Widget from "../../components/Widget.astro"
import { Image } from "astro:assets"
import infernals from "../../assets/game/factions/infernals-small.png"
import vanguard from "../../assets/game/factions/vanguard-small.png"
import MatchPreview from "../../components/widgets/MatchPreview.astro"
import { PlayersApi } from "../../lib/api"
import { RankedBadge } from "../../components/ui/RankedBadge"
import PlayerActivity from "../../components/widgets/PlayerActivity.astro"
import PlayerMatchupStats from "../../components/widgets/PlayerMatchupStats.astro"
import PlayerGameLengthStats from "../../components/widgets/PlayerGameLengthStats.astro"
import PlayerOpponents from "../../components/widgets/PlayerOpponents.astro"
import { styles } from "../../lib/theme"

type Theme = keyof typeof styles.badges

// to be moved to own file
async function getDataOrErrorResponse<T extends readonly unknown[] | []>(
  ...values: T
): Promise<[{ -readonly [P in keyof T]: Awaited<T[P]> }, error: Response | null]> {
  try {
    const result = await Promise.all(values)
    return [result, null]
  } catch (e) {
    return [[] as any, new Response(null, { status: 500, statusText: `${e}` })]
  }
}

const playerId = Astro.params.id!
const [[player, playerMatches, playerActivity, playerMatchupStats, playerOpponents], error] =
  await getDataOrErrorResponse(
    PlayersApi.getPlayer({ playerId }),
    PlayersApi.getPlayerMatches({ playerId }),
    PlayersApi.getPlayerStatisticsActivity({ playerId }),
    PlayersApi.getPlayerStatisticsMatchups({ playerId }),
    PlayersApi.getPlayerStatisticsOpponents({ playerId, count: 5 })
  )
if (error) return error

const highestLeague = player?.leaderboard_entries?.reduce(
  (acc, entry) => (entry.points > acc.points ? entry : acc),
  player.leaderboard_entries[0]
)
---

<Layout title={player?.nickname}>
  <div class="w-full border-b border-gray-700/50 bg-gray-800/50 backdrop-blur-lg">
    <div class="mx-auto flex max-w-screen-lg flex-wrap items-center gap-4 px-4 py-4 md:px-8">
      <div class="flex flex-auto items-center gap-3">
        {player.avatar_url && <img src={player.avatar_url} alt={player.nickname} class="w-6 rounded-sm md:w-8" />}
        <h1 class="flex-auto text-lg font-bold text-gray-50 md:text-2xl">{player.nickname}</h1>
      </div>
      <RankedBadge entry={highestLeague} class="w-16 md:w-20" client:load />
    </div>
  </div>
  <section class="relative mx-auto flex max-w-screen-lg flex-col gap-6 px-4 py-8 md:px-7 lg:flex-row">
    <div class="flex-auto">
      <Widget title="Recent Matches" label="Closed Beta Ranked">
        <div class="">
          {playerMatches.matches.map((match) => <MatchPreview match={match} mainPlayerId={playerId} />)}
        </div>
      </Widget>
    </div>
    <div class="order-first flex basis-1/4 flex-col gap-6 sm:flex-row lg:order-none lg:flex-col">
      <Widget title="Top Ranks">
        <div class="flex flex-col gap-2">
          {
            player.leaderboard_entries.map((entry) => (
              <div
                class:list={[
                  "rounded-lg pl-3 pr-1 py-2 -mx-2 flex items-center gap-3 text-sm sm:text-base",
                  styles.badges[entry.race as Theme].badge,
                ]}
              >
                <Image
                  src={entry.race === "infernals" ? infernals : vanguard}
                  alt={entry.race}
                  class="size-6 sm:size-10"
                />
                <div>
                  <span class:list={["text-xs", styles.badges[entry.race as Theme].badgeLabel]}>Rank</span>
                  <p>#{entry.rank}</p>
                </div>
                <div>
                  <span class:list={["text-xs", styles.badges[entry.race as Theme].badgeLabel]}>Points</span>
                  <p>
                    {Math.round(entry.points)}

                    <RankedBadge entry={entry} class="inline-block w-4" client:load />
                  </p>
                </div>
                <div>
                  <span class:list={["text-xs", styles.badges[entry.race as Theme].badgeLabel]}>MMR</span>
                  <p>{Math.round(entry.mmr)}</p>
                </div>
              </div>
            ))
          }
        </div>
      </Widget>
      <div class="hidden sm:block">
        {playerActivity?.history && <PlayerActivity activity={playerActivity} {player} />}
      </div>
      <div class="hidden lg:block">
        {playerMatchupStats.matchups.length > 0 && <PlayerMatchupStats playerMatchupStats={playerMatchupStats} />}
      </div>
      <div class="hidden lg:block">
        {playerMatchupStats.matchups.length > 0 && <PlayerGameLengthStats playerMatchupStats={playerMatchupStats} />}
      </div>
      <div class="hidden lg:block">
        {playerOpponents.opponents.length > 0 && <PlayerOpponents opponents={playerOpponents} />}
      </div>
    </div>
    <div class="sm:hidden">
      {playerActivity?.history && <PlayerActivity activity={playerActivity} {player} />}
    </div>
    <div class="lg:hidden">
      {playerMatchupStats.matchups.length > 0 && <PlayerMatchupStats playerMatchupStats={playerMatchupStats} />}
    </div>
    <div class="lg:hidden">
      {playerMatchupStats.matchups.length > 0 && <PlayerGameLengthStats playerMatchupStats={playerMatchupStats} />}
    </div>
    <div class="lg:hidden">
      {playerOpponents.opponents.length > 0 && <PlayerOpponents opponents={playerOpponents} />}
    </div>
  </section>
</Layout>
